// <auto-generated> This file ha
// s been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace SupplierHunterEntities
{
    public partial class SupplierHunterContext : DbContext
    {
        public SupplierHunterContext()
        {
        }

        public SupplierHunterContext(DbContextOptions<SupplierHunterContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Discount> Discount { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductSupplier> ProductSupplier { get; set; }
        public virtual DbSet<Quantity> Quantity { get; set; }
        public virtual DbSet<Season> Season { get; set; }
        public virtual DbSet<Supplier> Supplier { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Discount>(entity =>
            {
                entity.HasKey(e => e.IdDiscount);

                entity.ToTable("Discounts");

                entity.Property(e => e.RidSeason).HasColumnName("RIdSeason");

                entity.HasOne(d => d.RidSeasonNavigation)
                    .WithMany(p => p.Discount)
                    .HasForeignKey(d => d.RidSeason)
                    .HasConstraintName("FK_Discounts_Seasons");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasKey(e => e.IdProduct);

                entity.ToTable("Products");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ProductSupplier>(entity =>
            {
                entity.HasKey(e => e.IdProductSupplier);

                entity.ToTable("ProductsSuppliers");

                entity.Property(e => e.RidDiscount).HasColumnName("RIdDiscount");

                entity.Property(e => e.RidProduct).HasColumnName("RIdProduct");

                entity.Property(e => e.RidSupplier).HasColumnName("RIdSupplier");

                entity.HasOne(d => d.RidDiscountNavigation)
                    .WithMany(p => p.ProductSupplier)
                    .HasForeignKey(d => d.RidDiscount)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_ProductsSuppliers_Discounts");

                entity.HasOne(d => d.RidProductNavigation)
                    .WithMany(p => p.ProductSupplier)
                    .HasForeignKey(d => d.RidProduct)
                    .HasConstraintName("FK_ProductsSuppliers_Products");

                entity.HasOne(d => d.RidSupplierNavigation)
                    .WithMany(p => p.ProductSupplier)
                    .HasForeignKey(d => d.RidSupplier)
                    .HasConstraintName("FK_ProductsSuppliers_Suppliers");
            });

            modelBuilder.Entity<Quantity>(entity =>
            {
                entity.HasKey(e => e.IdQuantity);

                entity.ToTable("Quantities");

                entity.Property(e => e.Percentage).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.Quantity1).HasColumnName("Quantity");

                entity.Property(e => e.RidDiscount).HasColumnName("RIdDiscount");

                entity.HasOne(d => d.RidDiscountNavigation)
                    .WithMany(p => p.Quantity)
                    .HasForeignKey(d => d.RidDiscount)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Quantities_Discounts");
            });

            modelBuilder.Entity<Season>(entity =>
            {
                entity.HasKey(e => e.IdSeason);

                entity.ToTable("Seasons");

                entity.Property(e => e.EndDate).HasColumnType("smalldatetime");

                entity.Property(e => e.StartDate).HasColumnType("smalldatetime");
            });

            modelBuilder.Entity<Supplier>(entity =>
            {
                entity.HasKey(e => e.IdSupplier);

                entity.ToTable("Suppliers");

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.BusinessName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}